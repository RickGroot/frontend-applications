{"version":3,"sources":["charts/data/modules/barCode.js","charts/data/modules/endpoint.js","charts/data/modules/getData.js","charts/data/bar.js","charts/barchart.js","charts/localStorage.js","charts/data/modules/mapCode.js","charts/data/map.js","charts/data/circles.js","charts/mapchart.js","img/hummer.jpg","App.js","reportWebVitals.js","index.js"],"names":["margin","width","height","x","d3","range","padding","y","endpoint","endpoint2","selectedColumn","compare","array1","array2","a","result1","result2","compiled","forEach","itemArr1","itemArr2","areaid","location","parseFloat","longitude","latitude","push","areamanagerId","areamanagerid","areaId","capacity","chargingpointCapacity","chargingpointcapacity","disabledAccess","disabledaccess","maximumVehicleHeight","maximumvehicleheight","limitedAccess","limitedaccess","areaDesc","areadesc","loadBar","barSVG","attr","append","getData","url","fetch","then","result","json","RDWData","key","filter","item","data","barData","d","map","name","value","amount","length","mergeValues","dataArray","domain","sort","selectAll","enter","bandwidth","parseInt","updateColor","call","barchart","Barchart","useEffect","id","storage","window","localStorage","getStorage","JSON","parse","getItem","k","translate","mapProjection","center","scale","mapPath","projection","calculateRadius","onZoom","event","mapSVG","transform","setItem","stringify","loadMap","features","scaleExtent","translateExtent","on","e","loadCircles","object","select","console","log","Mapchart","App","className","src","Hummer","alt","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0fc0f2ce.chunk.js","sourcesContent":["import * as d3 from 'd3';\r\n\r\n//set dimentions for bar chart\r\nlet margin = {\r\n    top: 20,\r\n    right: 20,\r\n    bottom: 30,\r\n    left: 40\r\n};\r\n// let width = parseInt(getComputedStyle(document.querySelector('#bar')).width) - margin.left - margin.right;\r\n// let height = parseInt(getComputedStyle(document.querySelector('#bar')).height) - margin.top - margin.bottom;\r\nlet width = 700 - margin.left - margin.right;\r\nlet height = 400 - margin.top - margin.bottom;\r\n\r\n//set the ranges\r\nvar x = d3.scaleBand()\r\n    .range([0, width])\r\n    .padding(0.1);\r\n\r\nvar y = d3.scaleLinear()\r\n    .range([height, 0]);\r\n\r\nfunction updateColor(d) {\r\n    if (parseInt(d.name) <= 200) {\r\n        return 'redBar';\r\n    } else {\r\n        return 'greenBar';\r\n    }\r\n}\r\n\r\nexport {\r\n    margin,\r\n    width,\r\n    height,\r\n    x,\r\n    y,\r\n    updateColor\r\n};","const endpoint = 'https://opendata.rdw.nl/resource/b3us-f26s.json?$limit=90000'; //specificaties parkeergebied dataset\r\nconst endpoint2 = 'https://opendata.rdw.nl/resource/t5pc-eb34.json?$limit=90000'; //GEO Parkeer Garages dataset\r\nconst selectedColumn = 'maximumvehicleheight';\r\n\r\nexport { endpoint, endpoint2, selectedColumn };","async function compare(array1, array2) { //async function that awaits the promised arrays\r\n    const result1 = await array1; //waits for incoming data\r\n    const result2 = await array2;\r\n    let compiled = [];\r\n\r\n    result1.forEach(itemArr1 => { //loops over each item in result1\r\n\r\n        result2.forEach(itemArr2 => { //loops over each item in result2 to check same area id's\r\n\r\n            if (itemArr1.areaid === itemArr2.areaid) {\r\n\r\n                let location = [parseFloat(itemArr2.location.longitude), parseFloat(itemArr2.location.latitude)]; //saves location to an array\r\n\r\n                compiled.push({ //pushes an object into array 'compiled'\r\n                    areamanagerId: itemArr1.areamanagerid,\r\n                    areaId: itemArr1.areaid,\r\n                    capacity: parseFloat(itemArr1.capacity), //parseFloat() turns a string containing a number to a number type\r\n                    chargingpointCapacity: itemArr1.chargingpointcapacity,\r\n                    disabledAccess: itemArr1.disabledaccess,\r\n                    maximumVehicleHeight: itemArr1.maximumvehicleheight,\r\n                    limitedAccess: itemArr1.limitedaccess,\r\n                    location: location,\r\n                    areaDesc: itemArr2.areadesc\r\n                });\r\n            }\r\n        })\r\n    })\r\n\r\n    return compiled;\r\n}\r\n\r\nexport { compare };","import * as d3 from 'd3';\r\nimport { margin,\r\n    width,\r\n    height,\r\n    x,\r\n    y,\r\n    updateColor\r\n } from './modules/barCode';\r\n    import { endpoint, endpoint2, selectedColumn } from './modules/endpoint'\r\n    import { compare } from './modules/getData';\r\n\r\n// all logic of the bar chart is in this function\r\nfunction loadBar() {\r\n\r\n    var barSVG = d3.select(\"#bar\")\r\n    .attr(\"width\", width + margin.left + margin.right)\r\n    .attr(\"height\", height + margin.top + margin.bottom)\r\n    .append(\"g\")\r\n    .attr(\"transform\",\r\n        \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n    function getData(url) {\r\n        return fetch(url); //fetches data from API url\r\n    }\r\n\r\n    function filterObjectValue(dataArray, key) {\r\n        return dataArray.filter(item => item[key] > 0); //returns only objects with a key-value higher than 0\r\n    }\r\n\r\n\r\n\r\n    //data from endpoint 1\r\n    let data1 = getData(endpoint) //calls function getData with API link\r\n        .then(result => { //only continues when data is fetched\r\n            return result.json()\r\n        })\r\n        .then(RDWData => {\r\n            const filteredDataObjects = filterObjectValue(RDWData, selectedColumn); //callsfilterObject with data and column ID\r\n\r\n            return filteredDataObjects;\r\n        })\r\n\r\n    //data from endpoint 2\r\n    let data2 = getData(endpoint2) //calls function getData with API link\r\n        .then(result => { //only continues when data is fetched\r\n            return result.json() //puts result into JSON\r\n        })\r\n        .then(RDWData => {\r\n            return RDWData;\r\n        })\r\n\r\n    //all the clean data\r\n    compare(data1, data2) //calls compare function, and logs result when ready\r\n        .then(result => { //fires when data is collected\r\n            // mapThings(result); //calls function that puts circles on the map\r\n            barchart(result); //calls function that places barchart\r\n            return result;\r\n        });\r\n\r\n        function filterData(dataArray, key) {\r\n            return dataArray.map(item => item[key]); //filters column data from array\r\n        }\r\n\r\n//gets called when the data is collected\r\nfunction barchart(data) {\r\n\r\n    let heights = filterData(data, 'maximumVehicleHeight');\r\n    let barData = mergeValues(heights);\r\n\r\n    //scale the range of the data in the domains\r\n    x.domain(barData.map(function (d) {\r\n        return d.name; //sets names on x-axis\r\n    }).sort(d3.ascending));\r\n    y.domain([0, d3.max(barData, function (d) {\r\n        return d.amount; //sets max value of y-axis based on data\r\n    })]);\r\n\r\n    //append the bars for the bar chart\r\n    barSVG.selectAll(\".bar\")\r\n        .data(barData)\r\n        .enter().append(\"rect\")\r\n        .attr(\"class\", \"bar\")\r\n        .attr(\"x\", function (d) {\r\n            return x(d.name);\r\n        })\r\n        .attr(\"width\", x.bandwidth())\r\n        .attr(\"y\", function (d) {\r\n            return y(d.amount);\r\n        })\r\n        .attr(\"height\", function (d) {\r\n            return height - y(d.amount);\r\n        })\r\n        .attr('class', d=> updateColor(d))\r\n        // .on(\"mouseover\", mouseOverBar) //calls function when hovering\r\n        // .on(\"mouseout\", mouseOutBar) //calls function when not hovering\r\n\r\n    //add the x axis\r\n    barSVG.append(\"g\")\r\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n        .call(d3.axisBottom(x));\r\n\r\n    //add the y axis\r\n    barSVG.append(\"g\")\r\n        .call(d3.axisLeft(y));\r\n}\r\n\r\n//puts all double values in a new object\r\nfunction mergeValues(data) {\r\n    return d3.groups(data, d => d)\r\n        .map(([name, value]) => ({ //creates array in object with name and value\r\n            name,\r\n            amount: d3.rollup(value, d => d).length\r\n        }))\r\n}\r\n\r\n// //when mouse is on a bar\r\n// function mouseOverBar(event, d) { //add interactivity\r\n\r\n//     barTooltip.html(d.amount + ' parkeergarages met <br> een hoogte van ' + d.name + 'cm'); //text of the tooltip\r\n\r\n//     barTooltip.style('left', (event.pageX) + 'px') //position of the tooltip\r\n//         .style('top', (event.pageY + 10) + 'px')\r\n//         .attr('class', 'focus'); //sets class that shows tooltip\r\n// }\r\n\r\n// //when mouse is off a bar\r\n// function mouseOutBar() { //sets hover back when not hovering\r\n//     barTooltip.attr('class', 'unfocus'); //sets class for not showing tooltip\r\n// }\r\n}\r\n\r\nexport default loadBar;","import React, { useEffect } from 'react';\r\nimport loadBar from './data/bar'\r\n\r\nfunction Barchart() {\r\n\r\n    useEffect(() => {\r\n        loadBar();\r\n    }, []);\r\n\r\n    return (\r\n        <svg id='bar'>\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default Barchart;","const storage = window.localStorage //define local storage\r\n\r\nfunction storeData(data) { //gets data from zoom function\r\n    storage.setItem('zoom', JSON.stringify(data))\r\n}\r\n\r\nfunction getStorage() {\r\n    let data = JSON.parse(storage.getItem('zoom'));\r\n    if (data) { //checks if there is data, error prevention\r\n        let css = 'translate(' + data.x + ',' + data.y + ') scale(' + data.k + ')';\r\n        return css //returns correct css property\r\n    }\r\n}\r\n\r\nexport {\r\n    storeData,\r\n    getStorage\r\n}","import * as d3 from 'd3';\r\nimport { storeData } from '../../localStorage'\r\n\r\nlet mapSVG = d3.select(\"#map\");\r\n\r\nlet translate;\r\n\r\n// Map and projection\r\nlet mapProjection = d3.geoMercator()\r\n    .center([6.36, 52.4]) // GPS of location to zoom on\r\n    .scale(7000) // This is like the zoom\r\n// .translate([ width/2, height/2 ])\r\n\r\nlet mapPath = d3.geoPath().projection(mapProjection)\r\n\r\nfunction calculateRadius(capacity) { //function that calculates the radius of a bubble on the bubble map\r\n    let radius;\r\n    if (capacity > 1000) {\r\n        radius = 10;\r\n    } else if (capacity < 1000 && capacity > 700) {\r\n        radius = 8;\r\n    } else if (capacity < 700 && capacity > 500) {\r\n        radius = 6;\r\n    } else {\r\n        radius = 4;\r\n    }\r\n    return (radius);\r\n}\r\n\r\nfunction mapThings(object) { //gets called when data is ready\r\n\r\n    //draw the circles on the map\r\n    mapSVG.select('#circles').selectAll('circle')\r\n        .data(object)\r\n        .enter().append('circle')\r\n        .attr('class', d => {\r\n            return d.maximumVehicleHeight\r\n        }) //adds class to interact with slider\r\n        .attr('cx', d => {\r\n            return mapProjection(d.location)[0];\r\n        }) //adds location from data object\r\n        .attr(\"cy\", d => {\r\n            return mapProjection(d.location)[1];\r\n        })\r\n        .attr(\"r\", d => {\r\n            return calculateRadius(d.capacity);\r\n        }) //calls function to calculate radius\r\n}\r\n\r\n\r\nfunction onZoom(event, mapSVG) {\r\n    mapSVG.selectAll('svg g').attr('transform', event.transform);\r\n    translate = event.transform;\r\n    storeData(translate)\r\n}\r\n\r\nfunction updateColor(d) {\r\n    if(d.maximumVehicleHeight <= 200) { // if height is more then 200\r\n        return 'redDot'; // return correct classname\r\n    } else {\r\n        return 'greenDot';\r\n    }\r\n}\r\n\r\nexport {\r\n    onZoom,\r\n    calculateRadius,\r\n    mapProjection,\r\n    mapPath,\r\n    updateColor\r\n}","import * as d3 from 'd3';\r\nimport { onZoom, mapSVG, mapPath } from './modules/mapCode';\r\nimport { getStorage } from '../localStorage';\r\n\r\nfunction loadMap() {\r\n\r\n    let mapSVG = d3.select(\"#map\");\r\n    \r\n    // mapSVG.selectAll('svg g').attr('transform', getStorage);\r\n    \r\n    // getStorage()\r\n\r\n    function drawMap() {\r\n        d3.json(\"https://gist.githubusercontent.com/larsbouwens/1afef9beb0c3df0e4b24/raw/5ed7eb4517eee5737a4cb4551558e769ed8da41a/nl.json\").then(data => {\r\n\r\n            //draw the map\r\n            mapSVG.selectAll(\"#paths\")\r\n                .selectAll(\"path\")\r\n                .data(data.features)\r\n                .enter().append(\"path\")\r\n                .attr(\"d\", mapPath)\r\n        })\r\n\r\n        // let groups = document.querySelector('#map g');\r\n        // groups.style.transform = getStorage();\r\n\r\n        mapSVG.selectAll('g') //sets transform from localstorage\r\n            .attr('transform', getStorage)\r\n\r\n        //zooming on map\r\n        mapSVG.call(d3.zoom()\r\n            .scaleExtent([1, 4]) //maximum zooming levels\r\n            .translateExtent([ //maximum panning levels\r\n                [-200, -200],\r\n                [1000, 800]\r\n            ])\r\n            .on('zoom', e => onZoom(e, mapSVG))); //calls function onZoom\r\n    }\r\n\r\n\r\n    \r\n    drawMap()\r\n}\r\n\r\nexport default loadMap;","import * as d3 from 'd3';\r\nimport {\r\n    endpoint,\r\n    endpoint2,\r\n    selectedColumn\r\n} from './modules/endpoint'\r\nimport {\r\n    compare\r\n} from './modules/getData';\r\nimport {\r\n    calculateRadius,\r\n    mapProjection,\r\n    updateColor\r\n} from './modules/mapCode';\r\n// import { sliderVertical } from 'd3-simple-slider';\r\n\r\nfunction loadCircles() {\r\n\r\n\r\n    let mapSVG = d3.select('#map');\r\n\r\n\r\n    function getData(url) {\r\n        return fetch(url); //fetches data from API url\r\n    }\r\n\r\n    function filterObjectValue(dataArray, key) {\r\n        return dataArray.filter(item => item[key] > 0); //returns only objects with a key-value higher than 0\r\n    }\r\n\r\n\r\n\r\n    //data from endpoint 1\r\n    let data1 = getData(endpoint) //calls function getData with API link\r\n        .then(result => { //only continues when data is fetched\r\n            return result.json()\r\n        })\r\n        .then(RDWData => {\r\n            const filteredDataObjects = filterObjectValue(RDWData, selectedColumn); //callsfilterObject with data and column ID\r\n\r\n            return filteredDataObjects;\r\n        })\r\n\r\n    //data from endpoint 2\r\n    let data2 = getData(endpoint2) //calls function getData with API link\r\n        .then(result => { //only continues when data is fetched\r\n            return result.json() //puts result into JSON\r\n        })\r\n        .then(RDWData => {\r\n            return RDWData;\r\n        })\r\n\r\n    //all the clean data\r\n    compare(data1, data2) //calls compare function, and logs result when ready\r\n        .then(result => { //fires when data is collected\r\n            mapThings(result); //calls function that puts circles on the map\r\n            // barchart(result); //calls function that places barchart\r\n            return result;\r\n        });\r\n\r\n    function mapThings(object) { //gets called when data is ready\r\n\r\n        //draw the circles on the map\r\n        mapSVG.select('#circles').selectAll('circle')\r\n            .data(object)\r\n            .enter().append('circle')\r\n            .attr('class', d => {\r\n                return d.maximumVehicleHeight\r\n            }) //adds class to interact with slider\r\n            .attr('cx', d => {\r\n                return mapProjection(d.location)[0];\r\n            }) //adds location from data object\r\n            .attr('cy', d => {\r\n                return mapProjection(d.location)[1];\r\n            })\r\n            .attr('r', d => {\r\n                return calculateRadius(d.capacity);\r\n            }) //calls function to calculate radius\r\n            .attr('class', d => updateColor(d)) //calls color class\r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n    console.log('hallo')\r\n\r\n}\r\n\r\nexport default loadCircles;","import React, { useEffect } from 'react';\r\nimport loadMap from './data/map';\r\nimport loadCircles from './data/circles';\r\n\r\nfunction Mapchart() {\r\n\r\n    useEffect(() => {\r\n        loadMap();\r\n        loadCircles();\r\n}, []);\r\n\r\n    return (\r\n        <svg id='map'>\r\n            <g id='paths'></g>\r\n            <g id='circles'></g>\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default Mapchart;","export default __webpack_public_path__ + \"static/media/hummer.e4d78828.jpg\";","import React from 'react';\r\nimport Barchart from './charts/barchart';\r\nimport Mapchart from './charts/mapchart';\r\nimport './App.css';\r\nimport Hummer from './img/hummer.jpg';\r\n\r\nfunction App() {\r\n\r\n  return(\r\n      <article>\r\n        <section className='head'>\r\n          <h1>Met een Hummer in de parkeergarage</h1>\r\n          <img src={Hummer} alt='Parkeergarage' className='cover'></img>\r\n          <p>Parkeergarages zijn in elke grote stad te vinden, en worden het hele jaar door gebruikt door iedereen. Maar wat nou als je een grote auto hebt, pas je dan nog wel in de meeste parkeergarages?</p>\r\n          <p>Een hummer is een voorbeeld van zo een grote auto, met maar liefst een hoogte van iets hoger dan 2 meter. In dit korte artikel heb ik uitgezocht in welke parkeergarages nog wel en niet geparkeerd kan worden met een Hummer.</p>\r\n        </section>\r\n        <section className='content'>\r\n          <h2>Garage hoogtes in een snel overzicht</h2>\r\n          <p>Hieronder staat een grafiek waarop alle hoogtes van parkeergarages staan. Zoals je ziet zijn er een heel aantal garages waar de Hummer niet in past. Totaal zijn er in Nederland 308 parkeergarages, die zich voornamelijk bevinden in de grote steden.</p>\r\n          <Barchart />\r\n          <p> Van deze parkeergarages zijn de meeste 2 meter hoog, wat net te laag is voor verschillende soorten auto's (waaronder Hummers). Ook zijn er veel parkeergarages die 1.90 meter hoog zijn. Hele hoge parkeergarages zijn op dit moment nog niet veel te vinden in Nederland, maar veel neiuwe parkeergarages worden tegenwoordig gebouwd met een hogere doorrijhoogte.</p>\r\n          <h2 className='maptitle'>In kaart gebracht</h2>\r\n          <p>In welke steden is het dan wel mogelijk om zonder te veel stress te parkeren? Op de map hieronder is te zien waar de parkeergarages liggen waar je kan parkeren met een Hummer of ander voertuig dat hoger is dan 2 meter.</p>\r\n          <div className ='legend'>\r\n            <div className='round1'></div>\r\n            <p>Hoger dan 2M</p>\r\n            <div className='round2'></div>\r\n            <p>Lager dan 2M</p>\r\n          </div>\r\n          <Mapchart />\r\n          <p>Zoals u hierboven kan zien zijn er nogsteeds een aantal parkeermogelijkheden voor een Hummer. In Amsterdam zijn er bijvoorbeeld een aantal kleine garages die geschikt zijn, maar ook in de grote steden als Rotterdam en Utrecht zijn genoeg mogelijkheden. In Friesland is zelfs elke parkeerplaats hoog genoeg!</p>\r\n          <p>Uit de data van de parkeergarages is te halen dat maar liefst 95 parkeergarages toegankelijk zijn voor auto's die hoger zijn dan 2 meter, en er zijn maar liefst 213 garages niet toegankelijk. Dit is een groot verschil, maar evengoed zijn er dus nog bijna 100 parkeergarages hoog genoeg.</p>\r\n        </section>\r\n        <section className='sources'>\r\n          <h3>Geraadpleegde bronnen</h3>\r\n          <a href='https://opendata.rdw.nl/Parkeren/Open-Data-Parkeren-SPECIFICATIES-PARKEERGEBIED/b3us-f26s'>Open Data Parkeren: SPECIFICATIES PARKEERGEBIED</a>\r\n          <a href='https://opendata.rdw.nl/Parkeren/GEO-Parkeer-Garages/t5pc-eb34'>GEO Parkeer Garages</a>\r\n        </section>\r\n      </article>\r\n  )\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();"],"sourceRoot":""}